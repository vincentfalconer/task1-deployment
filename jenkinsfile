pipeline {
    agent any

    environment {
        APP_IMAGE = "task1-app:latest"
        NGINX_IMAGE = "task1-nginx:latest"
    }

    stages {
        stage('Clean-up') {
            steps {
                sh '''
                docker rm -f $(docker ps -aq) || true
                docker rmi -f $(docker images -q) || true
                '''
            }
        }

        stage('Setup Networks/Volumes') {
            steps {
                sh '''
                docker network create task1-net || true
                docker volume create task1-data || true
                '''
            }
        }

        stage('Build Images') {
            steps {
                sh '''
                cd Task1
                docker build -t $APP_IMAGE -f Dockerfile .
                docker build -t $NGINX_IMAGE -f Dockerfile.nginx .
                '''
            }
        }

        stage('Security Scan') {
            steps {
                sh '''
                mkdir -p trivy-reports
                trivy fs --format json --output trivy-reports/fs-scan.json .
                trivy fs --format table --output trivy-reports/fs-scan.txt .
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-reports/*', fingerprint: true
                }
            }
        }

        stage('Run Containers') {
            steps {
                sh '''
                docker run -d --name task1-container --network task1-net -v task1-data:/app/data $APP_IMAGE
                docker run -d --name nginx --network task1-net -p 80:80 -v "$(pwd)/Task1/nginx.conf:/etc/nginx/nginx.conf" $NGINX_IMAGE
                '''
            }
        }

        stage('Docker Hub Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }

        stage('Push Images') {
            steps {
                sh '''
                docker tag $APP_IMAGE $DOCKER_USER/task1-app:latest
                docker tag $NGINX_IMAGE $DOCKER_USER/task1-nginx:latest
                docker push $DOCKER_USER/task1-app:latest
                docker push $DOCKER_USER/task1-nginx:latest
                '''
            }
        }
    }

    post {
        success {
            echo "Deployment, security scan, and Docker Hub push completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}